// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../features/auth/models/user_credential_model.dart';
import '../features/log/models/log_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7564469805248504584),
      name: 'UserCredential',
      lastPropertyId: const IdUid(7, 7708228299035446151),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3371565137475959743),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5012008725457217043),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7278252437315351268),
            name: 'displayName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5924640272630992555),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 746938658343397371),
            name: 'creationDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8335910415887778948),
            name: 'photoBase64',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7708228299035446151),
            name: 'passwordHash',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 8042770405943039730),
      name: 'LogModel',
      lastPropertyId: const IdUid(5, 5178964928888496354),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5651948883757028595),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4314513446878018759),
            name: 'log',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1814513725563379981),
            name: 'date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7111021189713135717),
            name: 'severity',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5178964928888496354),
            name: 'source',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 8042770405943039730),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    UserCredential: EntityDefinition<UserCredential>(
        model: _entities[0],
        toOneRelations: (UserCredential object) => [],
        toManyRelations: (UserCredential object) => {},
        getId: (UserCredential object) => object.id,
        setId: (UserCredential object, int id) {
          object.id = id;
        },
        objectToFB: (UserCredential object, fb.Builder fbb) {
          final emailOffset = fbb.writeString(object.email);
          final displayNameOffset = fbb.writeString(object.displayName);
          final uidOffset = fbb.writeString(object.uid);
          final photoBase64Offset = fbb.writeString(object.photoBase64);
          final passwordHashOffset = fbb.writeString(object.passwordHash);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, emailOffset);
          fbb.addOffset(2, displayNameOffset);
          fbb.addOffset(3, uidOffset);
          fbb.addInt64(4, object.creationDate?.millisecondsSinceEpoch);
          fbb.addOffset(5, photoBase64Offset);
          fbb.addOffset(6, passwordHashOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final creationDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final creationDateParam = creationDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(creationDateValue);
          final photoBase64Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final passwordHashParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = UserCredential(
              email: emailParam,
              displayName: displayNameParam,
              uid: uidParam,
              creationDate: creationDateParam,
              photoBase64: photoBase64Param,
              passwordHash: passwordHashParam,
              id: idParam);

          return object;
        }),
    LogModel: EntityDefinition<LogModel>(
        model: _entities[1],
        toOneRelations: (LogModel object) => [],
        toManyRelations: (LogModel object) => {},
        getId: (LogModel object) => object.id,
        setId: (LogModel object, int id) {
          object.id = id;
        },
        objectToFB: (LogModel object, fb.Builder fbb) {
          final logOffset = fbb.writeString(object.log);
          final severityOffset = fbb.writeString(object.severity);
          final sourceOffset = fbb.writeString(object.source);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, logOffset);
          fbb.addInt64(2, object.date.millisecondsSinceEpoch);
          fbb.addOffset(3, severityOffset);
          fbb.addOffset(4, sourceOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final logParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final severityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final sourceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = LogModel(
              log: logParam,
              date: dateParam,
              severity: severityParam,
              source: sourceParam,
              id: idParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [UserCredential] entity fields to define ObjectBox queries.
class UserCredential_ {
  /// see [UserCredential.id]
  static final id =
      QueryIntegerProperty<UserCredential>(_entities[0].properties[0]);

  /// see [UserCredential.email]
  static final email =
      QueryStringProperty<UserCredential>(_entities[0].properties[1]);

  /// see [UserCredential.displayName]
  static final displayName =
      QueryStringProperty<UserCredential>(_entities[0].properties[2]);

  /// see [UserCredential.uid]
  static final uid =
      QueryStringProperty<UserCredential>(_entities[0].properties[3]);

  /// see [UserCredential.creationDate]
  static final creationDate =
      QueryIntegerProperty<UserCredential>(_entities[0].properties[4]);

  /// see [UserCredential.photoBase64]
  static final photoBase64 =
      QueryStringProperty<UserCredential>(_entities[0].properties[5]);

  /// see [UserCredential.passwordHash]
  static final passwordHash =
      QueryStringProperty<UserCredential>(_entities[0].properties[6]);
}

/// [LogModel] entity fields to define ObjectBox queries.
class LogModel_ {
  /// see [LogModel.id]
  static final id = QueryIntegerProperty<LogModel>(_entities[1].properties[0]);

  /// see [LogModel.log]
  static final log = QueryStringProperty<LogModel>(_entities[1].properties[1]);

  /// see [LogModel.date]
  static final date =
      QueryIntegerProperty<LogModel>(_entities[1].properties[2]);

  /// see [LogModel.severity]
  static final severity =
      QueryStringProperty<LogModel>(_entities[1].properties[3]);

  /// see [LogModel.source]
  static final source =
      QueryStringProperty<LogModel>(_entities[1].properties[4]);
}
